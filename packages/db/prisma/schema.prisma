// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  clerkId        String   @unique
  email          String   @unique
  name           String?
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum TrainStatus {
  Generated
  Failed
  Pending
}

model TrainModel {
  id          String        @id @default(uuid())
  name        String
  age         Int
  ethinicity  Ethinicity
  eyeColor    eyeColor
  userId      String
  type        Type
  bald        Boolean
  triggerPath String?
  tensorPath  String?
  thumbnail   String?
  status      TrainStatus   @default(Pending)
  zipUrl      String
  OutputImage OutputImage[]
  open        Boolean       @default(false)
  FalAiId     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([FalAiId])
}

model OutputImage {
  id        String     @id @default(uuid())
  imageUrl  String     @default("")
  modelId   String
  prompt    String
  userId    String
  status    Status     @default(Pending)
  model     TrainModel @relation(fields: [modelId], references: [id])
  FalAiId   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([FalAiId])
}

model Pack {
  id          String       @id @default(uuid())
  name        String
  description String       @default("")
  imageUrl    String       @default("")
  prompts     PackPrompt[]
}

model PackPrompt {
  id     String @id @default(uuid())
  prompt String
  packId String
  pack   Pack   @relation(fields: [packId], references: [id])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  plan      PlanType
  paymentId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCredit {
  id        String   @id @default(cuid())
  userId    String   @unique
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  plan      PlanType
  status    TransactionStatus @default(PENDING)
  amount    Int
  paymentId String
  orderId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PlanType {
  basic
  pro
  premium
}

enum PaymentStatus {
  Pending
  Failed
  Success
}

enum Status {
  Generated
  Failed
  Pending
}

enum Ethinicity {
  White
  Black
  Asian_American
  Hispanic
  Indian
  Middle_Easter
  South_Asian
}

enum eyeColor {
  Brown
  Blue
  Hazel
  Grey
}

enum Type {
  Man
  Women
  Other
}
